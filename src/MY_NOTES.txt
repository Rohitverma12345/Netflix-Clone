Points to learn

1. Map Method (get images and their name)
2. Use ref
3. Useeffect
4. UseRef + UseEffect ( Scroll)
5. State with condition multiples - ( SIgn In and Sign Up )
6. Api with props passing - (Category of tmdb api fetch props)
7. async and await
8. useffect for api
9. pro in api data 
10. Login Logout
11. Form HAndling



titlecards.jsx
import React, { useEffect, useRef, useState} from 'react'
import "./TitleCards.css"
import cards_data from "../../assets/cards/Cards_data"
import { Link } from 'react-router-dom';



const TitleCards = ({title, category}) => {

  const [apiData, setApiData] = useState([]);

  const cardsRef = useRef();

  const options = {
  method: 'GET',
  headers: {
    accept: 'application/json',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjNTEwZDc3YTdmNjYzMzBmNjZiZGIxMzVlZjNkN2IwOCIsIm5iZiI6MTc1OTUxMDU5My42ODk5OTk4LCJzdWIiOiI2OGUwMDA0MTkzODIyYjkzZGRlY2I3OTkiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.0dOjU_zmefBohRLtyQjzOBynQ_x_NN1j3Pmbmk6dvyI'
  }
};


  const handleWheel=(event)=>{
    event.preventDefault();
    cardsRef.current.scrollLeft += event.deltaY;
  }

  useEffect(()=>{

    fetch(`https://api.themoviedb.org/3/movie/${category?category:"now_playing"}?language=en-US&page=1`, options)
    .then(resp => resp.json())
    .then(resp => setApiData(resp.results))
    .catch(err => console.error(err));

    cardsRef.current.addEventListener('wheel', handleWheel);
  },[])

  return (
    <div className='title-cards'>
       <h2>{title?title:"Popular on Netflix"}</h2>
       <div className="card-list"  ref={cardsRef}>
        {apiData.map((card, index)=>{
            return <Link to={`/player/${card.id}`} className="card" key={index}>
              <img src={`https://image.tmdb.org/t/p/w500/` + card.backdrop_path} alt=''/>
              <p>{card.original_title}</p>
            </Link>
        })}
       </div>
    </div>
  )
}

export default TitleCards;







import React, { useEffect, useState } from 'react'
import "./Player.css"
import back_arrow_icon from "../../assets/back_arrow_icon.png"
import { useNavigate, useParams } from 'react-router-dom'

const Player = () => {

  const {id} = useParams();

  const navigate = useNavigate();

  const [apiData, setApiData] = useState({
    name: "",
    key: "",
    published_at: "",
    typeof: ""

  })
   
  const options = {
  method: 'GET',
  headers: {
    accept: 'application/json',
    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjNTEwZDc3YTdmNjYzMzBmNjZiZGIxMzVlZjNkN2IwOCIsIm5iZiI6MTc1OTUxMDU5My42ODk5OTk4LCJzdWIiOiI2OGUwMDA0MTkzODIyYjkzZGRlY2I3OTkiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.0dOjU_zmefBohRLtyQjzOBynQ_x_NN1j3Pmbmk6dvyI'
  }
};

useEffect(()=>{
  fetch(`https://api.themoviedb.org/3/movie/${id}/videos?language=en-US`, options)
  .then(res => res.json())
  .then(res => setApiData(res.results[0]))
  .catch(err => console.error(err));
},[])


  return (
    <div className='player'>
       <img src={back_arrow_icon} alt="" onClick={()=>{navigate(-2)}} />
       <iframe width='90%' height='90%' src={`https://www.youtube.com/embed/${apiData.key}`} title='trailer' frameBorder='0' allowFullScreen ></iframe>
       <div className="player-info">
        <p>{apiData.published_at.slice(0,10)}</p>
        <p>{apiData.name}</p>
        <p>{apiData.type}</p>
       </div>
    </div>
  )
}

export default Player







titlecards

import React, { useEffect, useRef, useState } from 'react';
import { Link } from 'react-router-dom';
import "./TitleCards.css";

const TitleCards = ({ title, category }) => {
  const [apiData, setApiData] = useState([]);
  const cardsRef = useRef();

  const options = {
    method: 'GET',
    headers: {
      accept: 'application/json',
      Authorization: 'Bearer  eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjNTEwZDc3YTdmNjYzMzBmNjZiZGIxMzVlZjNkN2IwOCIsIm5iZiI6MTc1OTUxMDU5My42ODk5OTk4LCJzdWIiOiI2OGUwMDA0MTkzODIyYjkzZGRlY2I3OTkiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.0dOjU_zmefBohRLtyQjzOBynQ_x_NN1j3Pmbmk6dvyI'
    }
  };

  const handleWheel = (event) => {
    event.preventDefault();
    if (cardsRef.current) {
      cardsRef.current.scrollLeft += event.deltaY;
    }
  };

  useEffect(() => {
    const fetchMovies = async () => {
      try {
        console.log("Fetching movies for category:", category || "now_playing");
        const response = await fetch(
          `https://api.themoviedb.org/3/movie/${category || "now_playing"}?language=en-US&page=1`,
          options
        );
        const data = await response.json();
        console.log("Fetched movies:", data.results);
        setApiData(data.results || []);
      } catch (err) {
        console.error("API fetch error:", err);
      }
    };

    fetchMovies();

    const cardsContainer = cardsRef.current;
    if (cardsContainer) {
      cardsContainer.addEventListener('wheel', handleWheel);
    }

    return () => {
      if (cardsContainer) {
        cardsContainer.removeEventListener('wheel', handleWheel);
      }
    };
  }, [category ? category : "now_playing"]); // stable dependency

  return (
    <div className='title-cards'>
      <h2>{title || "Popular on Netflix"}</h2>
      <div className="card-list" ref={cardsRef}>
        {apiData.map((card, index) => (
          card.backdrop_path && (
            <Link to={`/player/${card.id}`} className="card" key={index}>
              <img
                src={`https://image.tmdb.org/t/p/w500/${card.backdrop_path}`}
                alt={card.original_title}
              />
              <p>{card.original_title}</p>
            </Link>
          )
        ))}
      </div>
    </div>
  );
};

export default TitleCards;
